
Assignment name  : print_hex
Expected files   : print_hex.c
Allowed functions: write
--------------------------------------------------------------------------------

Écrire un programme qui prend un entier positif ou nul exprimé en base 10, et l'affiche en base 16 (avec des minuscules) suivi d'un newline.

Si le nombre de paramêtres n'est pas 1, le programme affiche un newline.

Exemples:

$> ./print_hex "10" | cat -e
a$
$> ./print_hex "255" | cat -e
ff$
$> ./print_hex "5156454" | cat -e
4eae66$
$> ./print_hex | cat -e
$






///////////////////////////////////////////////////////////

Assignment name  : ft_atoi_base
Expected files   : ft_atoi_base.c
Allowed functions: None
--------------------------------------------------------------------------------

Écrire une fonction convertit son argument 'str', une chaîne (en base N <= 16)
en un entier (base 10) et le retourne.

Les caractères reconnus dans l'entrée sont : 0123456789abcdef Bien entendu, la
base demandée conditionne le nombre de caractères à prendre en compte. Par
exemple, la base 4 reconnaîtra "0123" et la base 16 reconnaîtra
"0123456789abcdef".

Les majuscules marchent aussi : "12fdb3" est pareil que "12FDB3".

Les caractères '-' doivent être interprétés seulement s'ils sont en première
position dans la chaîne.

Votre fonction sera déclarée comme suit:

int	ft_atoi_base(const char *str, int str_base);








///////////////////////////////////////////////////////////

Assignment name  : ft_list_size
Expected files   : ft_list_size.c, ft_list.h
Allowed functions: 
--------------------------------------------------------------------------------

Écrire une fonction qui renvoie le nombre d'éléments dans la liste chaînée
passée en paramètre.

Elle devra être prototypée de la façon suivante:

int	ft_list_size(t_list *begin_list);

Vous devez utiliser la structure suivante, et la rendre dans un fichier
ft_list.h:

typedef struct    s_list
{
	struct s_list *next;
	void          *data;
}                 t_list;








///////////////////////////////////////////////////////////

Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Écrire la fonction suivante :

int     *ft_range(int start, int end);

Cette fonction doit allouer avec malloc() un tableau d'ints, le remplir avec
les valeurs (consécutives) démarrant à start et finissant à end (start et end
inclus !), et renvoyer un pointeur vers la première valeur du tableau.

Exemples:

- Avec (1, 3) vous devrez renvoyer un tableau contenant 1, 2 et 3.
- Avec (-1, 2) vous devrez renvoyer un tableau contenant -1, 0, 1 et 2.
- Avec (0, 0) vous devrez renvoyer un tableau contenant 0.
- Avec (0, -3) vous devrez renvoyer un tableau contenant 0, -1, -2 et -3.

