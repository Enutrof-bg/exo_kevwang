//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////

Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Écrire la fonction suivante :

int     *ft_range(int start, int end);

Cette fonction doit allouer avec malloc() un tableau d'ints, le remplir avec
les valeurs (consécutives) démarrant à start et finissant à end (start et end
inclus !), et renvoyer un pointeur vers la première valeur du tableau.

Exemples:

- Avec (1, 3) vous devrez renvoyer un tableau contenant 1, 2 et 3.
- Avec (-1, 2) vous devrez renvoyer un tableau contenant -1, 0, 1 et 2.
- Avec (0, 0) vous devrez renvoyer un tableau contenant 0.
- Avec (0, -3) vous devrez renvoyer un tableau contenant 0, -1, -2 et -3.

//////////////////////////////////////////////////////////////////////

Assignment name  : ft_list_size
Expected files   : ft_list_size.c, ft_list.h
Allowed functions: 
--------------------------------------------------------------------------------

Écrire une fonction qui renvoie le nombre d'éléments dans la liste chaînée
passée en paramètre.

Elle devra être prototypée de la façon suivante:

int ft_list_size(t_list *begin_list);

Vous devez utiliser la structure suivante, et la rendre dans un fichier
ft_list.h:

typedef struct    s_list
{
    struct s_list *next;
    void          *data;
}                 t_list;


//////////////////////////////////////////////////////////////////////
Assignment name  : print_hex
Expected files   : print_hex.c
Allowed functions: write
--------------------------------------------------------------------------------

Écrire un programme qui prend un entier positif ou nul exprimé en base 10, et l'affiche en base 16 (avec des minuscules) suivi d'un newline.

Si le nombre de paramêtres n'est pas 1, le programme affiche un newline.

Exemples:

$> ./print_hex "10" | cat -e
a$
$> ./print_hex "255" | cat -e
ff$
$> ./print_hex "5156454" | cat -e
4eae66$
$> ./print_hex | cat -e
$


//////////////////////////////////////////////////////////////////////

Assignment name  : ft_list_foreach
Expected files   : ft_list_foreach.c, ft_list.h
Allowed functions: 
--------------------------------------------------------------------------------

Écrire une fonction qui prend une liste et un pointeur sur fonction en
paramètres, et applique la fonction à chaque élément de la liste.

Elle devra être prototypée de la façon suivante:

void    ft_list_foreach(t_list *begin_list, void (*f)(void *));

La fonction pointée par f sera utilisée comme suit:

(*f)(list_ptr->data);

Vous devez utiliser la structure suivante, et la rendre dans un fichier
ft_list.h:

typedef struct    s_list
{
    struct s_list *next;
    void          *data;
}                 t_list;













////////////////////////////////////////////////////////////////////
Assignment name  : ft_split
Expected files   : ft_split.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Écrire une fonction qui prend en paramètre une chaîne de caractères et la
découpe en mots, qui seront retournés sous la forme d'un tableau de chaînes
terminé par NULL.

On appelle "mot" une portion de chaîne de caractères délimitée soit par des
espaces, des retours à la ligne et/ou des tabulations, soit par le début / fin
de la chaîne.

Votre fonction devra être prototypée de la façon suivante :

char    **ft_split(char *str);










////////////////////////////////////////////////////////////////////
Assignment name  : ft_itoa
Expected files   : ft_itoa.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Écrire une fonction qui prend un int et le convertit en chaîne terminée par un
caractère nul. Cette fonction retourne le résultat en tant qu'un tableau de
char que vous devez allouer.

Votre fonction sera déclarée comme suit:

char	*ft_itoa(int nbr);