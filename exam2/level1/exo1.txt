LEVEL1

Assignment name  : fizzbuzz
Expected files   : fizzbuzz.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that prints the numbers from 1 to 100, each separated by a
newline.

If the number is a multiple of 3, it prints 'fizz' instead.

If the number is a multiple of 5, it prints 'buzz' instead.

If the number is both a multiple of 3 and a multiple of 5, it prints 'fizzbuzz' instead.

Example:

$>./fizzbuzz
1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
[...]
97
98
fizz
buzz
$>





///////////////////////////////////////////////////////////

Assignment name  : ft_swap
Expected files   : ft_swap.c
Allowed functions: 
--------------------------------------------------------------------------------

Écrire une fonction qui échange le contenu de deux entiers dont les adresses
sont passées en paramêtres.

Elle devra être prototypée de la façon suivante :

void	ft_swap(int *a, int *b);

///////////////////////////////////////////////////////////

Assignment name  : rot_13
Expected files   : rot_13.c
Allowed functions: write
--------------------------------------------------------------------------------

Écrire un programme nommé rotone, qui prend en paramètre une chaîne de
caractères, et qui affiche cette chaîne en remplaçant chaque caractère
alphabétique par le caractère situé 13 caractères plus loin dans l'ordre
alphabétique.

'z' devient 'm' et 'Z' devient 'M'. Les majuscules restent des majuscules, les
minuscules restent des minuscules.

L'affichage se termine toujours par un retour à la ligne.

Si le nombre de paramètres transmis est différent de 1, le programme affiche
'\n'.

Exemple:

$>./rot_13 "abc"
nop
$>./rot_13 "My horse is Amazing." | cat -e
Zl ubefr vf Nznmvat.$
$>./rot_13 "AkjhZ zLKIJz , 23y " | cat -e
NxwuM mYXVWm , 23l $
$>./rot_13 | cat -e
$
$>
$>./rot_13 "" | cat -e
$
$>





///////////////////////////////////////////////////////////

Assignment name  : alpha_mirror
Expected files   : alpha_mirror.c
Allowed functions: write
--------------------------------------------------------------------------------

Écrire un programme alpha_mirror qui prend une chaîne et l'affiche après en avoir remplacé chaque
caractère alphabétique par le caractère alphabétique opposé, suivie d'un newline.

'a' devient 'z', 'Z' devient 'A'
'd' devient 'w', 'M' devient 'N'

Etc...

La casse n'est pas changée.

Si le nombre d'arguments n'est pas 1, affiche juste un newline.

Exemples:

$>./alpha_mirror "abc"
zyx
$>./alpha_mirror "My horse is Amazing." | cat -e
Nb slihv rh Znzarmt.$
$>./alpha_mirror | cat -e
$
$>

